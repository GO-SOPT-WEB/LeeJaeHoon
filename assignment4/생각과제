# 다양한 디자인 패턴 비교 (공부)

## **presentational and container Components 패턴**

이 패턴은 컴포낸트 내에서도 추가적으로 레이어를 적절히 나누기위해 로직과 뷰를 분리리하는 한가지 방법이다.

**presentational 컴포넌트**

- html, css, presentational component만 사용 가능하다.
- presentational와  container 모두를 내부적으로 가질 수 있다.
- 필요시 visual을 바꾸는 props를 받을 수 있어야한다.

**container 컴포넌트**

- 어떠한 동작을 할 것인가에 대해 책임진다.
- 절대로 DOM마크업 구조나 스타일을 가져서는 안된다.
- 주로 상태를 가지며 props를 자유롭게 받을 수 있다.

**장점:** 

재사용성을 높일 수 있다.

구조에 대한 이해가 쉽다.

마크업 작업이 편하다.

**결론**

현재는 이 패턴을 소개한 저자가 이 패턴을 사용하지 말라고 언급하고 있다

1. 로직과 순수한 view를 나눠 view를 좀더 재사용 가능한 상태로 강제하려는 것과,  
2. 마크업과 로직을 분리해서 복잡도를 낮추었지만 

1번은 bottom-up방식으로 정적인 페이지를 만드는 방법으로, 2번은 react hook을 사용하는 방법으로 대체가 될 수 있어서 현재 꼭 필요한 경우가 아니라면 굳이 강제적으로 이 패턴을 사용할 이유는 없을 것 같다.

## Custom hooks

컴포넌트에서 로직을 hooks 로 분리하여 관리하는 디자인 패턴

**장점**

- 여러컴포넌트에서 동일한 로직을 공유할 수 있다.
- 컴포넌트 제어가 쉬워지고 사용자가 더 많은 통제권을 가질 수 있다.

**단점**

- 로직과 렌더링이 분리되어 있어 컴포넌트 동작방식에 대한 깊은 이해를 필요

**결론**

제어의 역전과 컴포넌트 동작방식에 대한 이해를 충분히 가진 개발자가 사용해야할 것 같다.

로직이 분리되어서 코드 가독성이 증가한다는 장점도 있을 것 같다.

## atomic

컴포넌트 재활용을 최대화하기 위한 방법론으로 원자 개념을 사용한 디자인패턴

**Atoms(원자)**

- 가장 작은 단위의 컴포넌트이다. (디자인과 기능의 최소 단위)
- 다양한 state 즉 상태, 색상, 폰트, 애니메이션과 같은 추상적인 요소가 포함될 수 있다.
- 대표적인 컴포넌트는 버튼(Button), 텍스트(Text), 아이콘(Icon) 등이 있다.

**분자(Molecules)**

- 2개 이상의 원자로 구성되어 있다.
- 하나의 단위로 함께 동작하는 UI 컴포넌트들의 단순한 그룹이다.
- 대표적인 컴포넌트는 입력 폼(Input Form), 내비게이션(Navigation), 카드(Card) 등이 있다.

**Organism(유기체)**

- 분자들을 결합하여 유기체를 형성 (분자가 되지 않은 원자도 포함)
- 인터페이스가 어떻게 보이는지 시작하는 단계
- 대표적인 컴포넌트는 입력 폼과 함께 헤더를 감싸거나, 카드를 관리하는 그리드 등이 있다.

**템플릿(Templetes)**

- 여러 유기체의 집합
- 디자인을 확인하고 레이아웃이 실제로 구동하는지 확인하는 단계
- 대표적인 컴포넌트는 여러 카드와 그리드를 묶는 템플릿(헤더, 메인, 푸터) 등이 있다.

**Page(페이지)**

- 템플릿을 이용해서 배치를 통해 컴포넌트를 그려서 디스플레이한다.
- 완성된 하나의 페이지이다.

**장점**

- 컴포넌트 재사용 극대화
- 계층 구조를 알아보기 쉬워 설계, 변경이 빠르다
- 디자인 요소가 사용될 컴포넌트에 일괄로 적용되므로 style적용 및 변경 쉬움

**단점**

- 컴포넌트가 적절하게 분리되지 않으면 오히려 컴포넌트 복잡도가 높아져 유지보수 까다로움
- Page부터 Atom까지 너무 많은 props drilling이 일어나 복잡한 상태관리를 유발함
- props drilling이 많이 일어난 다는 것은 그것을 거쳐가는 컴포넌트의 리렌더링도 더 많이 유발하지 않을까?

**결론**

현재 진행하고 있는 프로젝트에서 적용하는 것이 atomic디자인 패턴인줄도 모르고 사용하고 있었다.

Input이나 textarea, button등을 재사용하는 것 덕분에 개발자 개인의 개발시간을 줄였다고 생각하고 디자인 통일성에 대해서는 확실한 장점을 느꼈다. 다만 초기에 시간을 많이 사용해야하기 때문에  재사용이 얼마나 빈번한지에 대한 고민과 아토믹의 5단계를 어떻게 명확하게 나눠야할지에 대한 고민을 거치고 사용해야할 것 같다.

# 어떤 방식을 언제 택하는 것이 좋을까?
커밋 컨벤션, 코드 컨벤션, 디자인 패턴 모두 적절히 알맞은 것을 선택하면 많은 도움이 되지만 부적절한 것을 선택했을 때는 없는 것보다 못하다.
각각의 디자인패턴은 장점 많은 단점도 뚜렷하다. 그렇기에 본인의 프로젝트에 어떤 디자인패턴이 맞는지 잘 고민해보고 적용하는 자세를 가져야할 것 같다고 생각한다.

# 프론트엔드에게 디자인 패턴이란 어떤 존재일까?

프론트엔드에게 디자인 패턴이란 도로에 있는 차선과 같다고 생각한다. 
어느 차선을 선택할지는 운전자에 필요에 따라, 성향에 따라 다르지만 유기적으로 움직이는 도로의 상황을 고려하여 몇가지 지켜야할 규칙이 있다. 
이 규칙은 가끔은 불편하지만 언젠가 발생할 대형 인명 사고를 예방해주는 중요한 가이드라인이 된다.

